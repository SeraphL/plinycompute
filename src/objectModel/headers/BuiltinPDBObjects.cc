/*****************************************************************************
 *                                                                           *
 *  Copyright 2018 Rice University                                           *
 *                                                                           *
 *  Licensed under the Apache License, Version 2.0 (the "License");          *
 *  you may not use this file except in compliance with the License.         *
 *  You may obtain a copy of the License at                                  *
 *                                                                           *
 *      http://www.apache.org/licenses/LICENSE-2.0                           *
 *                                                                           *
 *  Unless required by applicable law or agreed to in writing, software      *
 *  distributed under the License is distributed on an "AS IS" BASIS,        *
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
 *  See the License for the specific language governing permissions and      *
 *  limitations under the License.                                           *
 *                                                                           *
 *****************************************************************************/
// Auto-generated by code in SConstruct

// first, record all of the type codes
objectTypeNamesList [getTypeName <Array <Nothing>> ()] = 1;
objectTypeNamesList [getTypeName <CheckEmployee> ()] = 2;
objectTypeNamesList [getTypeName <Company> ()] = 3;
objectTypeNamesList [getTypeName <Employee> ()] = 4;
objectTypeNamesList [getTypeName <Nothing> ()] = 5;
objectTypeNamesList [getTypeName <Handle <Nothing>> ()] = 6;
objectTypeNamesList [getTypeName <Object> ()] = 7;
objectTypeNamesList [getTypeName <String> ()] = 8;
objectTypeNamesList [getTypeName <Vector <Nothing>> ()] = 9;
objectTypeNamesList [getTypeName <Supervisor> ()] = 10;

void *memory = malloc (1024 * 1024 * 24);

// now, record all of the vTables
makeObjectAllocatorBlock (memory, 1024 * 1024 * 24, true);
{
	try {
		Array <Nothing> tempObject;
		allVTables [1] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate Array <Nothing> to extract the vTable.\n";
	}
}

makeObjectAllocatorBlock (memory, 1024 * 1024 * 24, true);
{
	try {
		CheckEmployee tempObject;
		allVTables [2] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate CheckEmployee to extract the vTable.\n";
	}
}

makeObjectAllocatorBlock (memory, 1024 * 1024 * 24, true);
{
	try {
		Company tempObject;
		allVTables [3] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate Company to extract the vTable.\n";
	}
}

makeObjectAllocatorBlock (memory, 1024 * 1024 * 24, true);
{
	try {
		Employee tempObject;
		allVTables [4] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate Employee to extract the vTable.\n";
	}
}

makeObjectAllocatorBlock (memory, 1024 * 1024 * 24, true);
{
	try {
		Nothing tempObject;
		allVTables [5] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate Nothing to extract the vTable.\n";
	}
}

makeObjectAllocatorBlock (memory, 1024 * 1024 * 24, true);
{
	try {
		Handle <Nothing> tempObject;
		allVTables [6] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate Handle <Nothing> to extract the vTable.\n";
	}
}

makeObjectAllocatorBlock (memory, 1024 * 1024 * 24, true);
{
	try {
		Object tempObject;
		allVTables [7] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate Object to extract the vTable.\n";
	}
}

makeObjectAllocatorBlock (memory, 1024 * 1024 * 24, true);
{
	try {
		String tempObject;
		allVTables [8] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate String to extract the vTable.\n";
	}
}

makeObjectAllocatorBlock (memory, 1024 * 1024 * 24, true);
{
	try {
		Vector <Nothing> tempObject;
		allVTables [9] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate Vector <Nothing> to extract the vTable.\n";
	}
}

makeObjectAllocatorBlock (memory, 1024 * 1024 * 24, true);
{
	try {
		Supervisor tempObject;
		allVTables [10] = tempObject.getVTablePtr ();
	} catch (NotEnoughSpace &e) {
		std :: cout << "Not enough memory to allocate Supervisor to extract the vTable.\n";
	}
}

makeObjectAllocatorBlock (1024 * 1024 * 24, true);
free (memory);
