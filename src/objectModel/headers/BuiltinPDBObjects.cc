/*****************************************************************************
 *                                                                           *
 *  Copyright 2018 Rice University                                           *
 *                                                                           *
 *  Licensed under the Apache License, Version 2.0 (the "License");          *
 *  you may not use this file except in compliance with the License.         *
 *  You may obtain a copy of the License at                                  *
 *                                                                           *
 *      http://www.apache.org/licenses/LICENSE-2.0                           *
 *                                                                           *
 *  Unless required by applicable law or agreed to in writing, software      *
 *  distributed under the License is distributed on an "AS IS" BASIS,        *
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
 *  See the License for the specific language governing permissions and      *
 *  limitations under the License.                                           *
 *                                                                           *
 *****************************************************************************/
//// Auto-generated by code in SConstruct
//
//// first, record all of the type codes
//objectTypeNamesList [getTypeName <QueryPermit> ()] = 1;
//objectTypeNamesList [getTypeName <StorageAddSet> ()] = 2;
//objectTypeNamesList [getTypeName <Array <Nothing>> ()] = 3;
//objectTypeNamesList [getTypeName <Ack> ()] = 4;
//objectTypeNamesList [getTypeName <Nothing> ()] = 5;
//objectTypeNamesList [getTypeName <KeepGoing> ()] = 6;
//objectTypeNamesList [getTypeName <Employee> ()] = 7;
//objectTypeNamesList [getTypeName <Handle <Nothing>> ()] = 8;
//objectTypeNamesList [getTypeName <Company> ()] = 9;
//objectTypeNamesList [getTypeName <NodeInfo> ()] = 10;
//objectTypeNamesList [getTypeName <StorageAddTempSet> ()] = 11;
//objectTypeNamesList [getTypeName <DoneWithResult> ()] = 12;
//objectTypeNamesList [getTypeName <CatTypeNameSearchResult> ()] = 13;
//objectTypeNamesList [getTypeName <CatTypeSearchResult> ()] = 14;
//objectTypeNamesList [getTypeName <ExecuteQuery> ()] = 15;
//objectTypeNamesList [getTypeName <PlaceOfQueryPlanner> ()] = 16;
//objectTypeNamesList [getTypeName <QueryPermitResponse> ()] = 17;
//objectTypeNamesList [getTypeName <QueryDone> ()] = 18;
//objectTypeNamesList [getTypeName <CheckEmployee> ()] = 19;
//objectTypeNamesList [getTypeName <ShutDown> ()] = 20;
//objectTypeNamesList [getTypeName <Supervisor> ()] = 21;
//objectTypeNamesList [getTypeName <StorageGetSetPages> ()] = 22;
//objectTypeNamesList [getTypeName <CatCreateSetRequest> ()] = 23;
//objectTypeNamesList [getTypeName <CatSetObjectTypeRequest> ()] = 24;
//objectTypeNamesList [getTypeName <StorageRemoveTempSet> ()] = 25;
//objectTypeNamesList [getTypeName <SetScan> ()] = 26;
//objectTypeNamesList [getTypeName <Vector <Nothing>> ()] = 27;
//objectTypeNamesList [getTypeName <CatSharedLibraryResult> ()] = 28;
//objectTypeNamesList [getTypeName <Object> ()] = 29;
//objectTypeNamesList [getTypeName <StorageGetData> ()] = 30;
//objectTypeNamesList [getTypeName <StorageGetDataResponse> ()] = 31;
//objectTypeNamesList [getTypeName <CatTypeNameSearch> ()] = 32;
//objectTypeNamesList [getTypeName <StoragePagePinned> ()] = 33;
//objectTypeNamesList [getTypeName <String> ()] = 34;
//objectTypeNamesList [getTypeName <CatSharedLibraryRequest> ()] = 35;
//objectTypeNamesList [getTypeName <StorageAddType> ()] = 36;
//objectTypeNamesList [getTypeName <StoragePinPage> ()] = 37;
//objectTypeNamesList [getTypeName <CatCreateDatabaseRequest> ()] = 38;
//objectTypeNamesList [getTypeName <SimpleRequestResult> ()] = 39;
//objectTypeNamesList [getTypeName <CatRegisterType> ()] = 40;
//objectTypeNamesList [getTypeName <StorageAddDatabase> ()] = 41;
//objectTypeNamesList [getTypeName <StorageUnpinPage> ()] = 42;
//objectTypeNamesList [getTypeName <StorageNoMorePage> ()] = 43;
//objectTypeNamesList [getTypeName <StorageAddData> ()] = 44;
//objectTypeNamesList [getTypeName <MyEmployee> ()] = 45;
//objectTypeNamesList [getTypeName <CloseConnection> ()] = 46;
//
//// now, record all of the vTables
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		QueryPermit tempObject;
//		allVTables [1] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate QueryPermit to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		StorageAddSet tempObject;
//		allVTables [2] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate StorageAddSet to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		Array <Nothing> tempObject;
//		allVTables [3] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate Array <Nothing> to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		Ack tempObject;
//		allVTables [4] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate Ack to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		Nothing tempObject;
//		allVTables [5] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate Nothing to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		KeepGoing tempObject;
//		allVTables [6] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate KeepGoing to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		Employee tempObject;
//		allVTables [7] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate Employee to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		Handle <Nothing> tempObject;
//		allVTables [8] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate Handle <Nothing> to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		Company tempObject;
//		allVTables [9] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate Company to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		NodeInfo tempObject;
//		allVTables [10] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate NodeInfo to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		StorageAddTempSet tempObject;
//		allVTables [11] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate StorageAddTempSet to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		DoneWithResult tempObject;
//		allVTables [12] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate DoneWithResult to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		CatTypeNameSearchResult tempObject;
//		allVTables [13] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate CatTypeNameSearchResult to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		CatTypeSearchResult tempObject;
//		allVTables [14] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate CatTypeSearchResult to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		ExecuteQuery tempObject;
//		allVTables [15] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate ExecuteQuery to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		PlaceOfQueryPlanner tempObject;
//		allVTables [16] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate PlaceOfQueryPlanner to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		QueryPermitResponse tempObject;
//		allVTables [17] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate QueryPermitResponse to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		QueryDone tempObject;
//		allVTables [18] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate QueryDone to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		CheckEmployee tempObject;
//		allVTables [19] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate CheckEmployee to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		ShutDown tempObject;
//		allVTables [20] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate ShutDown to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		Supervisor tempObject;
//		allVTables [21] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate Supervisor to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		StorageGetSetPages tempObject;
//		allVTables [22] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate StorageGetSetPages to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		CatCreateSetRequest tempObject;
//		allVTables [23] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate CatCreateSetRequest to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		CatSetObjectTypeRequest tempObject;
//		allVTables [24] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate CatSetObjectTypeRequest to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		StorageRemoveTempSet tempObject;
//		allVTables [25] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate StorageRemoveTempSet to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		SetScan tempObject;
//		allVTables [26] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate SetScan to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		Vector <Nothing> tempObject;
//		allVTables [27] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate Vector <Nothing> to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		CatSharedLibraryResult tempObject;
//		allVTables [28] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate CatSharedLibraryResult to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		Object tempObject;
//		allVTables [29] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate Object to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		StorageGetData tempObject;
//		allVTables [30] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate StorageGetData to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		StorageGetDataResponse tempObject;
//		allVTables [31] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate StorageGetDataResponse to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		CatTypeNameSearch tempObject;
//		allVTables [32] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate CatTypeNameSearch to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		StoragePagePinned tempObject;
//		allVTables [33] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate StoragePagePinned to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		String tempObject;
//		allVTables [34] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate String to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		CatSharedLibraryRequest tempObject;
//		allVTables [35] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate CatSharedLibraryRequest to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		StorageAddType tempObject;
//		allVTables [36] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate StorageAddType to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		StoragePinPage tempObject;
//		allVTables [37] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate StoragePinPage to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		CatCreateDatabaseRequest tempObject;
//		allVTables [38] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate CatCreateDatabaseRequest to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		SimpleRequestResult tempObject;
//		allVTables [39] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate SimpleRequestResult to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		CatRegisterType tempObject;
//		allVTables [40] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate CatRegisterType to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		StorageAddDatabase tempObject;
//		allVTables [41] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate StorageAddDatabase to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		StorageUnpinPage tempObject;
//		allVTables [42] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate StorageUnpinPage to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		StorageNoMorePage tempObject;
//		allVTables [43] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate StorageNoMorePage to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		StorageAddData tempObject;
//		allVTables [44] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate StorageAddData to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		MyEmployee tempObject;
//		allVTables [45] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate MyEmployee to extract the vTable.\n";
//	}
//}
//
//{
//	const UseTemporaryAllocationBlock tempBlock{1024 * 24};
//	try {
//		CloseConnection tempObject;
//		allVTables [46] = tempObject.getVTablePtr ();
//	} catch (NotEnoughSpace &e) {
//		std :: cout << "Not enough memory to allocate CloseConnection to extract the vTable.\n";
//	}
//}
//
