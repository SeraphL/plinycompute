/*****************************************************************************
 *                                                                           *
 *  Copyright 2018 Rice University                                           *
 *                                                                           *
 *  Licensed under the Apache License, Version 2.0 (the "License");          *
 *  you may not use this file except in compliance with the License.         *
 *  You may obtain a copy of the License at                                  *
 *                                                                           *
 *      http://www.apache.org/licenses/LICENSE-2.0                           *
 *                                                                           *
 *  Unless required by applicable law or agreed to in writing, software      *
 *  distributed under the License is distributed on an "AS IS" BASIS,        *
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
 *  See the License for the specific language governing permissions and      *
 *  limitations under the License.                                           *
 *                                                                           *
 *****************************************************************************/

#include <PrologOptimizer.h>

/**
 * This file is created from the PrologToTCAP.pl so it can be embedded into pdb
 */
const std::string pdb::PrologOptimizer::prologToTCAPScript = "\n"
    "\n"
    "% Recursively traverse the query graph:\n"
    "bottomUpSearch(Node, LeavesRemaining, ListofVisitedNodes):-\n"
    "\n"
    "\t% First we want to check:\n"
    "\t% If the node has been visited before?\n"
    "\n"
    "\t(member(Node, ListofVisitedNodes) ->\n"
    "\n"
    "\t\t% This \"Node\" has been visited before.\n"
    "\n"
    "\t\t% Check if any leaf node is still unexplored.\n"
    "\t\t% Start search from next leaf node.\n"
    "\t\t% Else we are done.\n"
    "\n"
    "\t\tlength(LeavesRemaining, LengthList),\n"
    "\t\t(LengthList \\= 0 ->\n"
    "\t\t\t[L|Rest] = LeavesRemaining,\n"
    "\t\t\tbottomUpSearch(L, Rest, ListofVisitedNodes)\n"
    "\t\t\t;\n"
    "\t\t\ttrue\n"
    "\t\t)\n"
    "\t\t;\n"
    "\n"
    "\t\t% The node has not been visited before.\n"
    "\n"
    "\t\t% Add this node to the list of visited.\n"
    "\t\tappend(ListofVisitedNodes, [Node], Visited),\n"
    "\n"
    "\n"
    "\t\t% Are we at root node?\n"
    "\t\t(Node = virtualRootNode ->\n"
    "\n"
    "\t\t\t% Start from next leaf node.\n"
    "\t\t\tlength(LeavesRemaining, LengthList),\n"
    "\t\t\t(LengthList \\= 0 ->\n"
    "\t\t\t\t[L|Rest] = LeavesRemaining,\n"
    "\t\t\t\tbottomUpSearch(L, Rest, Visited)\n"
    "\t\t\t\t;\n"
    "\t\t\t\ttrue\n"
    "\t\t\t)\n"
    "\t\t\t;\n"
    "\n"
    "\t\t\t% Else go up and explore the next compute node:\n"
    "\n"
    "\t\t\tnode(Node,Y,CompName,KeyValueList),\n"
    "\n"
    "\t\t\t% Scan Node:\n"
    "\t\t\t(Y = scan ->\n"
    "\t\t\t\twrite(tcapOutput,Node),\n"
    "\t\t\t\tlink(_,Node,Out,_,_),\n"
    "\t\t\t\twrite(tcapOutput,\"(\"),printList(Out),write(tcapOutput,\")<= SCAN(\"),\n"
    "\t\t\t\tscan(Node,SetName,DBName),\n"
    "\t\t\t\tprintString(SetName),write(tcapOutput,\",\"),\n"
    "\t\t\t\tprintString(DBName),write(tcapOutput,\",\"),\n"
    "\t\t\t\tprintString(CompName),\n"
    "\t\t\t\twrite(tcapOutput,\", [\"), printKeyValueList(KeyValueList), write(tcapOutput,\"]\"),\n"
    "\t\t\t\twrite(tcapOutput, \")\\n\"),\n"
    "\n"
    "\n"
    "\n"
    "\t\t\t\t% There might be multiple children:\n"
    "\t\t\t\tfindall(Child,link(Child,Node,_,_,_),Children),\n"
    "\t\t\t\tChildren = [Next|Siblings],\n"
    "\t\t\t\tappend(LeavesRemaining, Siblings, NewLeavesRemaining),\n"
    "\t\t\t\tlink(Next,Node,_,_,_),\n"
    "\t\t\t\tbottomUpSearch(Next, NewLeavesRemaining, Visited)\n"
    "\t\t\t ; true\n"
    "\t\t\t),\n"
    "\n"
    "\n"
    "\n"
    "\t\t\t% Apply Node:\n"
    "\t\t\t(Y = apply ->\n"
    "\t\t\t\tlink(Node,_,_,Input, Projection),\n"
    "\t\t\t\tlink(Next,Node,Out,_,_),\n"
    "\t\t\t\tapply(Node, InName, PrName, LName),\n"
    "\t\t\t\twrite(tcapOutput,Node),\n"
    "\t\t\t\twrite(tcapOutput,\"(\"),printList(Out),write(tcapOutput,\")<= APPLY(\"),\n"
    "\t\t\t\tprintNameListPair(InName, Input), write(tcapOutput,\",\"),\n"
    "\t\t\t\tprintNameListPair(PrName, Projection), write(tcapOutput,\",\"),\n"
    "\t\t\t\tprintString(CompName), write(tcapOutput,\",\"),\n"
    "\t\t\t\tprintString(LName),\n"
    "\t\t\t\twrite(tcapOutput,\", [\"), printKeyValueList(KeyValueList), write(tcapOutput,\"]\"),\n"
    "\t\t\t\twrite(tcapOutput, \")\\n\"),\n"
    "\t\t\t\tbottomUpSearch(Next, LeavesRemaining, Visited)\n"
    "\t\t\t ; true\n"
    "\t\t\t ),\n"
    "\n"
    "\n"
    "\t\t\t% HashLeft Node:\n"
    "\t\t\t(Y = hashleft ->\n"
    "\t\t\t\tlink(Node,_,_,Input, Projection),\n"
    "\t\t\t\tlink(Next,Node,Out,_,_),\n"
    "\t\t\t\twrite(tcapOutput,Node),\n"
    "\t\t\t\twrite(tcapOutput,\"(\"),printList(Out),write(tcapOutput,\")<= HASHLEFT(\"),\n"
    "\t\t\t\thashleft(Node, InName, PrName, LName),\n"
    "\t\t\t\tprintNameListPair(InName, Input), write(tcapOutput,\",\"),\n"
    "\t\t\t\tprintNameListPair(PrName, Projection), write(tcapOutput,\",\"),\n"
    "\t\t\t\tprintString(CompName), write(tcapOutput,\",\"),\n"
    "\t\t\t\tprintString(LName),\n"
    "\t\t\t\twrite(tcapOutput,\", [\"), printKeyValueList(KeyValueList), write(tcapOutput,\"]\"),\n"
    "\t\t\t\twrite(tcapOutput, \")\\n\"),\n"
    "\t\t\t\tbottomUpSearch(Next, LeavesRemaining, Visited)\n"
    "\t\t\t ; true\n"
    "\t\t\t ),\n"
    "\n"
    "\n"
    "\t\t\t% HashRight Node:\n"
    "\t\t\t(Y = hashright ->\n"
    "\t\t\t\tlink(Node,_,_,Input, Projection),\n"
    "\t\t\t\tlink(Next,Node,Out,_,_),\n"
    "\t\t\t\twrite(tcapOutput,Node),\n"
    "\t\t\t\twrite(tcapOutput,\"(\"),printList(Out),write(tcapOutput,\")<= HASHRIGHT(\"),\n"
    "\t\t\t\thashright(Node, InName, PrName, LName),\n"
    "\t\t\t\tprintNameListPair(InName, Input), write(tcapOutput,\",\"),\n"
    "\t\t\t\tprintNameListPair(PrName, Projection), write(tcapOutput,\",\"),\n"
    "\t\t\t\tprintString(CompName), write(tcapOutput,\",\"),\n"
    "\t\t\t\tprintString(LName),\n"
    "\t\t\t\twrite(tcapOutput,\", [\"), printKeyValueList(KeyValueList), write(tcapOutput,\"]\"),\n"
    "\t\t\t\twrite(tcapOutput, \")\\n\"),\n"
    "\t\t\t\tbottomUpSearch(Next, LeavesRemaining, Visited)\n"
    "\t\t\t ; true\n"
    "\t\t\t ),\n"
    "\n"
    "\n"
    "\t\t\t% Join Node:\n"
    "\t\t\t(Y = join ->\n"
    "\t\t\t\tlink(Next,Node,Out,_,_),\n"
    "\t\t\t\twrite(tcapOutput,Node),\n"
    "\t\t\t\twrite(tcapOutput,\"(\"),printList(Out),write(tcapOutput,\")<= JOIN(\"),\n"
    "\t\t\t\tjoin(Node, LeftInName, LeftPrName, RightInName, RightPrName),\n"
    "\t\t\t\tlink(Node, LeftInName, _, LeftIn, LeftProject),\n"
    "\t\t\t\tlink(Node, RightInName, _, RightIn, RightProject),\n"
    "\t\t\t\tprintNameListPair(LeftInName, LeftIn), write(tcapOutput,\",\"),\n"
    "\t\t\t\tprintNameListPair(LeftPrName, LeftProject), write(tcapOutput,\",\"),\n"
    "\t\t\t\tprintNameListPair(RightInName, RightIn), write(tcapOutput,\",\"),\n"
    "\t\t\t\tprintNameListPair(RightPrName, RightProject), write(tcapOutput,\",\"),\n"
    "\t\t\t\tprintString(CompName),\n"
    "\t\t\t\twrite(tcapOutput,\", [\"), printKeyValueList(KeyValueList), write(tcapOutput,\"]\"),\n"
    "\t\t\t\twrite(tcapOutput, \")\\n\"),\n"
    "\t\t\t\tbottomUpSearch(Next, LeavesRemaining, Visited)\n"
    "\t\t\t; true\n"
    "\t\t\t),\n"
    "\n"
    "\n"
    "\t\t\t% Filter Node:\n"
    "\t\t\t(Y = filter ->\n"
    "\t\t\t\tlink(Node,_,_,Input, Projection),\n"
    "\t\t\t\tlink(Next,Node,Out,_,_),\n"
    "\t\t\t\twrite(tcapOutput,Node),\n"
    "\t\t\t\twrite(tcapOutput,\"(\"),printList(Out),write(tcapOutput,\")<= FILTER(\"),\n"
    "\t\t\t\tfilter(Node, InName, PrName),\n"
    "\t\t\t\tprintNameListPair(InName, Input), write(tcapOutput,\",\"),\n"
    "\t\t\t\tprintNameListPair(PrName, Projection), write(tcapOutput,\",\"),\n"
    "\t\t\t\tprintString(CompName),\n"
    "\t\t\t\twrite(tcapOutput,\", [\"), printKeyValueList(KeyValueList), write(tcapOutput,\"]\"),\n"
    "\t\t\t\twrite(tcapOutput, \")\\n\"),\n"
    "\t\t\t\tbottomUpSearch(Next, LeavesRemaining, Visited)\n"
    "\t\t\t; true\n"
    "\t\t\t),\n"
    "\n"
    "\n"
    "\t\t\t% Hashone Node:\n"
    "\t\t\t(Y = hashone ->\n"
    "\t\t\t\tlink(Node,_,_,Input, Projection),\n"
    "\t\t\t\tlink(Next,Node,Out,_,_),\n"
    "\t\t\t\twrite(tcapOutput,Node),\n"
    "\t\t\t\twrite(tcapOutput,\"(\"),printList(Out),write(tcapOutput,\")<= HASHONE(\"),\n"
    "\t\t\t\thashone(Node, InName, PrName),\n"
    "\t\t\t\tprintNameListPair(InName, Input), write(tcapOutput,\",\"),\n"
    "\t\t\t\tprintNameListPair(PrName, Projection), write(tcapOutput,\",\"),\n"
    "\t\t\t\tprintString(CompName),\n"
    "\t\t\t\twrite(tcapOutput,\", [\"), printKeyValueList(KeyValueList), write(tcapOutput,\"]\"),\n"
    "\t\t\t\twrite(tcapOutput, \")\\n\"),\n"
    "\t\t\t\tbottomUpSearch(Next, LeavesRemaining, Visited)\n"
    "\t\t\t; true\n"
    "\t\t\t),\n"
    "\n"
    "\n"
    "\t\t\t% Flatten Node:\n"
    "\t\t\t(Y = flatten ->\n"
    "\t\t\t\tlink(Node,_,_,Input, Projection),\n"
    "\t\t\t\tlink(Next,Node,Out,_,_),\n"
    "\t\t\t\twrite(tcapOutput,Node),\n"
    "\t\t\t\twrite(tcapOutput,\"(\"),printList(Out),write(tcapOutput,\")<= FLATTEN(\"),\n"
    "\t\t\t\tflatten(Node, InName, PrName),\n"
    "\t\t\t\tprintNameListPair(InName, Input), write(tcapOutput,\",\"),\n"
    "\t\t\t\tprintNameListPair(PrName, Projection), write(tcapOutput,\",\"),\n"
    "\t\t\t\tprintString(CompName),\n"
    "\t\t\t\twrite(tcapOutput,\", [\"), printKeyValueList(KeyValueList), write(tcapOutput,\"]\"),\n"
    "\t\t\t\twrite(tcapOutput, \")\\n\"),\n"
    "\t\t\t\tbottomUpSearch(Next, LeavesRemaining, Visited)\n"
    "\t\t\t; true\n"
    "\t\t\t),\n"
    "\n"
    "\n"
    "\t\t\t% Output Node:\n"
    "\t\t\t(Y = output ->\n"
    "\t\t\t\tlink(Node,_,_,Input, Projection),\n"
    "\t\t\t\tlink(Next,Node,Out,_,_),\n"
    "\t\t\t\twrite(tcapOutput,Node),\n"
    "\t\t\t\twrite(tcapOutput,\"(\"),printList(Out),write(tcapOutput,\")<= OUTPUT(\"),\n"
    "\t\t\t\toutput(Node, InName, SetName,DBName),\n"
    "\t\t\t\tprintNameListPair(InName, Input), write(tcapOutput,\",\"),\n"
    "\t\t\t\tprintString(SetName),write(tcapOutput,\",\"),\n"
    "\t\t\t\tprintString(DBName),write(tcapOutput,\",\"),\n"
    "\t\t\t\tprintString(CompName),\n"
    "\t\t\t\twrite(tcapOutput,\", [\"), printKeyValueList(KeyValueList), write(tcapOutput,\"]\"),\n"
    "\t\t\t\twrite(tcapOutput, \")\\n\"),\n"
    "\t\t\t\tbottomUpSearch(Next, LeavesRemaining, Visited)\n"
    "\t\t\t ; true\n"
    "\t\t\t),\n"
    "\n"
    "\n"
    "\t\t\t% Aggregate Node:\n"
    "\t\t\t(Y = aggregate ->\n"
    "\t\t\t\tlink(Node,_,_,Input, Projection),\n"
    "\t\t\t\tlink(Next,Node,Out,_,_),\n"
    "\t\t\t\twrite(tcapOutput,Node),\n"
    "\t\t\t\twrite(tcapOutput,\"(\"),printList(Out),write(tcapOutput,\")<= AGGREGATE(\"),\n"
    "\t\t\t\taggregate(Node, InName),\n"
    "\t\t\t\tprintNameListPair(InName, Input), write(tcapOutput,\",\"),\n"
    "\t\t\t\tprintString(CompName),\n"
    "\t\t\t\twrite(tcapOutput,\", [\"), printKeyValueList(KeyValueList), write(tcapOutput,\"]\"),\n"
    "\t\t\t\twrite(tcapOutput, \")\\n\"),\n"
    "\t\t\t\tbottomUpSearch(Next, LeavesRemaining, Visited)\n"
    "\t\t\t; true\n"
    "\t\t\t)\n"
    "\t\t)\n"
    "\t).\n"
    "\n"
    "\n"
    "\n"
    "\n"
    "\n"
    "% Find the leaves:\n"
    "findLeaves(Leaves):-\n"
    "\tfindall(X0, scan(X0,_,_), Leaves).\n"
    "\n"
    "\n"
    "% TCAP generator:\n"
    "tcapGenerator():-\n"
    "    open('/tmp/tcapOutput.tcap', write, ID, [alias(tcapOutput)]),\n"
    "\tfindLeaves([H|T]),\n"
    "\tbottomUpSearch(H, T, []),\n"
    "\tclose(ID).\n"
    "\n"
    "\n"
    "% Print name-list pair: TCAP:\n"
    "printNameListPair(ListName, List):-\n"
    "\twrite(tcapOutput,ListName), write(tcapOutput,\"(\"), printList(List), write(tcapOutput,\")\").\n"
    "\n"
    "\n"
    "% Print string to console: 'String'\n"
    "printString(String):-\n"
    "\twrite(tcapOutput,\"'\"),write(tcapOutput,String),write(tcapOutput,\"'\").\n"
    "\n"
    "% Print list to console:\n"
    "printList([]).\n"
    "printList([H|T]):-\n"
    "\twrite(tcapOutput,H),\n"
    "\tlength(T, Len),\n"
    "\t(\tLen \\= 0 -> write(tcapOutput,\",\")\n"
    "\t\t; true\n"
    "\t),\n"
    "\tprintList(T).\n"
    "\n"
    "\n"
    "\n"
    "% Print KeyValueList to console:\n"
    "printKeyValueList([]).\n"
    "printKeyValueList([H|T]):-\n"
    "\tH = (A,B),\n"
    "\twrite(tcapOutput,\"(\"), printString(A),write(tcapOutput,\",\"),printString(B),write(tcapOutput,\")\"),\n"
    "\tlength(T, Len),\n"
    "\t(\tLen \\= 0 -> write(tcapOutput,\",\")\n"
    "\t\t; true\n"
    "\t),\n"
    "\tprintKeyValueList(T).";